import * as pd from 'pareto-core-data';
import * as g_this from "../../ts";
import T = g_this.proto__typesystem.Unresolved.T;
type RawDictionary<T> = {
    [key: string]: T;
};
export declare function ns(namespaces: RawDictionary<T.Local__Namespace.namespaces.D.$<pd.SourceLocation>>, typeParameters: RawDictionary<T.TType__Parameters.local.D.$<pd.SourceLocation>>, types: RawDictionary<T.TType.$<pd.SourceLocation>>): T.Local__Namespace.$<pd.SourceLocation>;
export declare function parentSibling(name: string): T.Namespace__2.$<pd.SourceLocation>;
export declare function local(typeParameters: RawDictionary<T.TType__Parameters.local.D.$<pd.SourceLocation>>, namespaces: RawDictionary<T.Local__Namespace.namespaces.D.$<pd.SourceLocation>>, types: RawDictionary<T.TType.$<pd.SourceLocation>>): T.Namespace__2.$<pd.SourceLocation>;
export declare function valueFunction(typeParameters: RawDictionary<T.TType__Parameters.local.D.$<pd.SourceLocation>>, context: T.TType.$<pd.SourceLocation>, parameters: RawDictionary<T.Function__Declaration.parameters.D.$<pd.SourceLocation>>, returnType: T.TType.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function addressFunction(typeParameters: RawDictionary<T.TType__Parameters.local.D.$<pd.SourceLocation>>, context: T.TType.$<pd.SourceLocation>, parameters: RawDictionary<T.Function__Declaration.parameters.D.$<pd.SourceLocation>>, returnType: T.TType.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function procedure(typeParameters: RawDictionary<T.TType__Parameters.local.D.$<pd.SourceLocation>>, context: T.TType.$<pd.SourceLocation>, parameters: RawDictionary<T.Function__Declaration.parameters.D.$<pd.SourceLocation>>, returnType: T.TType.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function null_(): T.TType.$<pd.SourceLocation>;
export declare function string(): T.TType.$<pd.SourceLocation>;
export declare function number(): T.TType.$<pd.SourceLocation>;
export declare function boolean(): T.TType.$<pd.SourceLocation>;
export declare function group(properties: RawDictionary<T.TType.group.D.$<pd.SourceLocation>>): T.TType.$<pd.SourceLocation>;
export declare function prop(type: T.TType.$<pd.SourceLocation>): T.TType.group.D.$<pd.SourceLocation>;
export declare function propMutable(type: T.TType.$<pd.SourceLocation>): T.TType.group.D.$<pd.SourceLocation>;
export declare function taggedUnion(options: RawDictionary<T.TType.tagged__union.D.$<pd.SourceLocation>>): T.TType.$<pd.SourceLocation>;
export declare function array(type: T.TType.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function computed(type: T.TType.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function optional(type: T.TType.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function dictionary(type: T.TType.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function step(ns: string, args?: RawDictionary<T.TType__Arguments.D.$<pd.SourceLocation>>, tail?: T.Namespace__Selection.$<pd.SourceLocation>): T.Namespace__Selection.$<pd.SourceLocation>;
export declare function typeArgument(type: T.TType.$<pd.SourceLocation>): T.TType__Arguments.D.$<pd.SourceLocation>;
export declare function externalTypeReference(nsPath: T.Namespace__Selection.$<pd.SourceLocation>, type: string): T.TType.$<pd.SourceLocation>;
export declare function typeParameter(typeParameter: string): T.TType.$<pd.SourceLocation>;
export declare function typeReference(type: string, cyclic?: boolean): T.TType.$<pd.SourceLocation>;
export {};
