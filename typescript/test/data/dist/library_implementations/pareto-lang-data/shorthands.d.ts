import * as pd from 'pareto-core-data';
import * as _ from "../../typesystem";
import T = _.pareto__lang__data.Unresolved.T;
import g_this = _.pareto__lang__data.Unresolved;
type RawDictionary<T> = {
    [key: string]: T;
};
export declare function imprt(library: string): T.Imports.D.$<pd.SourceLocation>;
export declare function typeLibrary(imports: RawDictionary<g_this.T.Imports.D.$<pd.SourceLocation>>, atomTypes: RawDictionary<g_this.T.Atom__Types.D.$<pd.SourceLocation>>, globalTypesDeclarations: RawDictionary<g_this.T.Global__Type__Declarations.D.$<pd.SourceLocation>>, globalTypesDefinitions: RawDictionary<g_this.T.Global__Type__Definition.$<pd.SourceLocation>>): g_this.T.TType__Library.$<pd.SourceLocation>;
export declare function array(type: T.TType.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function optional(type: T.TType.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function nothing(): T.TType.$<pd.SourceLocation>;
export declare function prop(type: T.TType.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function dictionaryReference(type: T.TType__Selection.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function lookupReference(type: T.Global__Type__Selection.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function cyclicReference(gloRef: T.Global__Type__Selection.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function lookupConstraint(gloSel: T.Global__Type__Selection.$<pd.SourceLocation>): T.TType._ltype.dictionary.constraints.D.$<pd.SourceLocation>;
export declare function dictionaryConstraint(type: T.TType__Selection.$<pd.SourceLocation>, dense: boolean): T.TType._ltype.dictionary.constraints.D.$<pd.SourceLocation>;
export declare function constrainedDictionary(constraints: RawDictionary<T.TType._ltype.dictionary.constraints.D.$<pd.SourceLocation>>, type: T.TType.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function dictionary(type: T.TType.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function constraint(type: T.TType__Selection.$<pd.SourceLocation>): T.TType.$<pd.SourceLocation>;
export declare function globalTypeDeclaration(parameters: RawDictionary<g_this.T.Global__Type__Declaration.parameters.D.$<pd.SourceLocation>>, result?: string): g_this.T.Global__Type__Declarations.D.$<pd.SourceLocation>;
export declare function globalTypeDefinition(type: g_this.T.TType.$<pd.SourceLocation>): g_this.T.Global__Type__Definition.$<pd.SourceLocation>;
export declare function group(rawProperties: RawDictionary<T.TType.$<pd.SourceLocation>>): T.TType.$<pd.SourceLocation>;
export declare function state(type: T.TType.$<pd.SourceLocation>): T.TType._ltype.state__group.states.D.$<pd.SourceLocation>;
export declare function stateGroup(states: RawDictionary<T.TType._ltype.state__group.states.D.$<pd.SourceLocation>>): T.TType.$<pd.SourceLocation>;
export declare function atom(type: string): T.TType.$<pd.SourceLocation>;
export declare function t_grp(prop: string, tail?: T.TType__Selection__Tail.$<pd.SourceLocation>): T.TType__Selection__Tail.$<pd.SourceLocation>;
export declare function t_dict(tail?: T.TType__Selection__Tail.$<pd.SourceLocation>): T.TType__Selection__Tail.$<pd.SourceLocation>;
export declare function t_arr(tail?: T.TType__Selection__Tail.$<pd.SourceLocation>): T.TType__Selection__Tail.$<pd.SourceLocation>;
export declare function t_sg(opt: string, tail?: T.TType__Selection__Tail.$<pd.SourceLocation>): T.TType__Selection__Tail.$<pd.SourceLocation>;
export declare function externalTypeSelection(imp: string, globalType: string, tail?: T.TType__Selection__Tail.$<pd.SourceLocation>): T.TType__Selection.$<pd.SourceLocation>;
export declare function typeSelection(globalType: string, tail?: T.TType__Selection__Tail.$<pd.SourceLocation>): T.TType__Selection.$<pd.SourceLocation>;
export declare function component(type: T.Global__Type__Selection.$<pd.SourceLocation>, args: RawDictionary<null>): T.TType.$<pd.SourceLocation>;
export declare function typeRef(type: string, cyclic?: boolean): T.Global__Type__Selection.$<pd.SourceLocation>;
export declare function imported(library: string, type: string): T.Global__Type__Selection.$<pd.SourceLocation>;
export {};
